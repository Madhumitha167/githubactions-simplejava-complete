name: Build
on:
  push:
    branches:
      - master # the name of your main branch
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
        run: mvn clean package org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
      - name: Build with Maven
        run: mvn -B package --file pom.xml
        working-directory: ${{ github.workspace }}
      - name: Set JAR file location as an environment variable
        run: echo "JAR_FILE_PATH=$(ls -d Maven/target/*.jar)" >> $GITHUB_ENV
      - name: Display JAR file location
        run: echo "JAR file is located at:$JAR_FILE_PATH"
      - name: Show Contents of target Directory
        run: ls -R /target
      - name: Debug Docker Context
        run: |
          pwd
          ls -R          
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_UNAME }}
        password: ${{ secrets.DOCKER_PASS }}
    - name: Build and Push Docker Image
      run: |
        docker build -t madhu1607/newjavaapp1:latest .
        docker push madhu1607/newjavaapp1:latest
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v2.0
      with:
        version: 'v1.27.0' # default is latest stable
      id: install
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1

    - name: Update kube config
      run: aws eks update-kubeconfig --name finaldeploycluster
    - name: Deploy to EKS
      run: |
        kubectl apply -f deployment.yml
        kubectl apply -f service.yml 
