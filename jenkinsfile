pipeline {
    agent any
    tools{
        jdk 'jdk17'
        maven 'maven3'
    }
    stages{
        stage("Compile"){
            steps{
                sh "mvn clean compile"
            }
        }
        stage("Test Cases"){
            steps{
                sh "mvn test"
            }
        }
        stage("Sonarqube analysis"){
            environment{
                SONAR_URL = "http://35.175.105.51:9000/"
            }
            steps{
               withCredentials([string(credentialsId:'sonar-token', variable: 'SONAR_TOKEN')]){
                 sh "mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=${SONAR_URL}"
            }
            }
        }
        stage("Build"){
            steps{
                sh "mvn clean install"
            }
        }
        stage("OWASP Dependency Check"){
            steps{
               dependencyCheck additionalArguments: '--scan ./ ' , odcInstallation: 'Dp-Check'
               dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage("Build and push docker images"){
            steps{
                script{
                  withDockerRegistry(credentialsId: 'docker-credentials', toolName: 'docker') {
                     sh "docker build -t myimage123 ." 
                     sh "docker tag myimage123 madhu1607/jenkinsapp2:latest "
                     sh "docker push madhu1607/jenkinsapp2:latest"
                     sh "docker run -d -p 9201:8080 madhu1607/jenkinsapp2 "
                    }  
                }
            }
        }
        
    }
}
